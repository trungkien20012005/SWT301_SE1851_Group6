import React, { useState } from "react";
import "./components/CreateBloodRequest.css";

const CreateBloodRequest = () => {
  const [formData, setFormData] = useState({
    fullName: "",
    dateOfBirth: "",
    gender: "",
    bloodType: "",
    rhType: "",
    medicalCondition: "",
    hospitalName: "",
    phone: "",
    requiredVolume: "",
    street: "",
    wardId: "",
    districtId: "",
    provinceId: "",
  });

  const [message, setMessage] = useState("");

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const payload = {
      patientId: 0, // ho·∫∑c ƒë·ªÉ BE t·ª± x·ª≠ l√Ω
      fullName: formData.fullName,
      dateOfBirth: formData.dateOfBirth,
      phone: formData.phone,
      gender: formData.gender,
      bloodType: formData.bloodType,
      rhType: formData.rhType === "+" ? "POSITIVE" : "NEGATIVE",
      requiredVolume: Number(formData.requiredVolume),
      hospitalName: formData.hospitalName,
      medicalCondition: formData.medicalCondition,
      patientAddress: {
        street: formData.street,
        wardId: Number(formData.wardId),
        districtId: Number(formData.districtId),
        provinceId: Number(formData.provinceId),
      },
    };

    try {
      const response = await fetch("/api/blood-request/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (response.ok) {
        setMessage("ü©∏ Y√™u c·∫ßu m√°u ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng.");
        setFormData({
          fullName: "",
          dateOfBirth: "",
          gender: "",
          bloodType: "",
          rhType: "",
          medicalCondition: "",
          hospitalName: "",
          phone: "",
          requiredVolume: "",
          street: "",
          wardId: "",
          districtId: "",
          provinceId: "",
        });
      } else {
        const errorData = await response.json();
        setMessage(`‚ùå L·ªói: ${errorData.message || "G·ª≠i y√™u c·∫ßu th·∫•t b·∫°i."}`);
      }
    } catch (error) {
      setMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i y√™u c·∫ßu.");
    }
  };

  return (
    <div className="blood-request-form-container">
      <h2>Y√™u c·∫ßu m√°u to√†n ph·∫ßn</h2>
      <form onSubmit={handleSubmit} className="blood-request-form">
        <label>H·ªç t√™n:</label>
        <input type="text" name="fullName" value={formData.fullName} onChange={handleChange} required />

        <label>Ng√†y sinh:</label>
        <input type="date" name="dateOfBirth" value={formData.dateOfBirth} onChange={handleChange} required />

        <label>S·ªë ƒëi·ªán tho·∫°i:</label>
        <input type="text" name="phone" value={formData.phone} onChange={handleChange} required />

        <label>Gi·ªõi t√≠nh:</label>
        <select name="gender" value={formData.gender} onChange={handleChange} required>
          <option value="">--Ch·ªçn gi·ªõi t√≠nh--</option>
          <option value="MALE">Nam</option>
          <option value="FEMALE">N·ªØ</option>
          <option value="OTHER">Kh√°c</option>
        </select>

        <label>Nh√≥m m√°u:</label>
        <select name="bloodType" value={formData.bloodType} onChange={handleChange} required>
          <option value="">--Ch·ªçn nh√≥m m√°u--</option>
          <option value="A">A</option>
          <option value="B">B</option>
          <option value="AB">AB</option>
          <option value="O">O</option>
        </select>

        <label>Y·∫øu t·ªë Rh:</label>
        <select name="rhType" value={formData.rhType} onChange={handleChange} required>
          <option value="">--Ch·ªçn Rh--</option>
          <option value="+">D∆∞∆°ng t√≠nh (+)</option>
          <option value="-">√Çm t√≠nh (-)</option>
        </select>

        <label>T√¨nh tr·∫°ng b·ªánh:</label>
        <textarea name="medicalCondition" value={formData.medicalCondition} onChange={handleChange} required />

        <label>B·ªánh vi·ªán ti·∫øp nh·∫≠n:</label>
        <input type="text" name="hospitalName" value={formData.hospitalName} onChange={handleChange} required />

        <label>Th·ªÉ t√≠ch m√°u y√™u c·∫ßu (ml):</label>
        <input type="number" name="requiredVolume" value={formData.requiredVolume} onChange={handleChange} required />

        <fieldset>
          <legend>ƒê·ªãa ch·ªâ b·ªánh nh√¢n</legend>
          <label>S·ªë nh√†, ƒë∆∞·ªùng:</label>
          <input type="text" name="street" value={formData.street} onChange={handleChange} required />

          <label>Ph∆∞·ªùng/X√£ (ID):</label>
          <input type="number" name="wardId" value={formData.wardId} onChange={handleChange} required />

          <label>Qu·∫≠n/Huy·ªán (ID):</label>
          <input type="number" name="districtId" value={formData.districtId} onChange={handleChange} required />

          <label>T·ªânh/Th√†nh ph·ªë (ID):</label>
          <input type="number" name="provinceId" value={formData.provinceId} onChange={handleChange} required />
        </fieldset>

        <button type="submit">G·ª≠i y√™u c·∫ßu</button>
      </form>

      {message && <p className="response-message">{message}</p>}
    </div>
  );
};

export default CreateBloodRequest;
